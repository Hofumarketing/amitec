---

import Page from "../../components/Page.astro";
import Button from "../../components/ui/Button.astro";
import H2 from "../../components/ui/h2.astro";
import Paragraph from "../../components/ui/Paragraph.astro";
import PostsOddEven from "../../components/sections/PostsOddEven.astro";
import Added from "../../components/ui/added.astro";
import Add from "../../components/ui/add.astro";
import Buttonunderline from "../../components/ui/Buttonunderline.astro";
import Similarproduct from "../../components/ui/similarproduct.astro";
import Cartitemdesktop from "../../components/ui/cartitemdesktop.astro";
import Cartitemdashboard from "../../components/ui/cartitemdashboard.astro";
import Panelmenu from "../../components/ui/panelmenu.astro";
import Trackeritem from "../../components/ui/trackeritem.astro";


let quantity = 1;

function handleQuantityChange(event) {
    quantity = parseInt(event.target.value, 10);
}
---


<Page>
<Panelmenu />
    <section  id="productcart-details" class=" mx-auto p-6 lg:pt-12 lg:pb-12 w-full ">
        <div class="mx-auto max-w-[1400px]  w-full ">
            <div class=" w-full lg:w-5/6 py-12 border-b ">
                <H2 type="big">Witaj w panelu klienta </H2>
                <div class="flex items-center mt-12">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M14 18V6C14 5.46957 13.7893 4.96086 13.4142 4.58579C13.0391 4.21071 12.5304 4 12 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V17C2 17.2652 2.10536 17.5196 2.29289 17.7071C2.48043 17.8946 2.73478 18 3 18H5" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M15 18H9" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M19 18H21C21.2652 18 21.5196 17.8946 21.7071 17.7071C21.8946 17.5196 22 17.2652 22 17V13.35C21.9996 13.1231 21.922 12.903 21.78 12.726L18.3 8.376C18.2065 8.25888 18.0878 8.16428 17.9528 8.0992C17.8178 8.03412 17.6699 8.00021 17.52 8H14" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M17 20C18.1046 20 19 19.1046 19 18C19 16.8954 18.1046 16 17 16C15.8954 16 15 16.8954 15 18C15 19.1046 15.8954 20 17 20Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M7 20C8.10457 20 9 19.1046 9 18C9 16.8954 8.10457 16 7 16C5.89543 16 5 16.8954 5 18C5 19.1046 5.89543 20 7 20Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <p class="font-bold ml-3 text-xl"> Śledź swoje zamówienie</p>
                </div>
            </div>


            <div id="trackers" class="accordion">
                <details class="accordion__item  border-b-2 relative border-t-2 border-[#000]" open>
                    <summary class="accordion__item-btn py-6 cursor-pointer">
                        <div class="flex w-full">
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Zamówienie</h3>
                                <p class="font-light mt-3">#76888</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Przewidywany czas dostawy</h3>
                                <p class="font-light mt-3">20 maja 2024r.</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Nr listu przewozowego</h3>
                                <p class="font-light mt-4 w-full">AW34234324576888</p><br>
                                <button class="px-4  border border-2 border-[#000] font-bold py-2 rounded-full"> skopiuj </button>
                            </div>
                        </div>
                    </summary>
                    <div class="accordion__item-desc">
                        <Trackeritem/>
                    </div>
                </details>
                <details class="accordion__item border-b-2 border-[#000]">
                    <summary class="accordion__item-btn py-6 cursor-pointer">
                        <div class="flex w-full">
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Zamówienie</h3>
                                <p class="font-light mt-3">#76888</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Przewidywany czas dostawy</h3>
                                <p class="font-light mt-3">20 maja 2024r.</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Nr listu przewozowego</h3>
                                <p class="font-light mt-4 w-full">AW34234324576888</p><br>
                                <button class="px-4  border border-2 border-[#000] font-bold py-2 rounded-full"> skopiuj </button>
                            </div>
                        </div>
                    </summary>
                    <div class="accordion__item-desc">
                        <Trackeritem/>
                    </div>
                </details>
                <details class="accordion__item border-b-2 border-[#000]">
                    <summary class="accordion__item-btn py-6  cursor-pointer">
                        <div class="flex w-full">
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Zamówienie</h3>
                                <p class="font-light mt-3">#76888</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Przewidywany czas dostawy</h3>
                                <p class="font-light mt-3">20 maja 2024r.</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Nr listu przewozowego</h3>
                                <p class="font-light mt-4 w-full">AW34234324576888</p><br>
                                <button class="px-4  border border-2 border-[#000] font-bold py-2 rounded-full"> skopiuj </button>
                            </div>
                        </div>
                    </summary>
                    <div class="accordion__item-desc">
                        <Trackeritem/>
                    </div>
                </details>
                <details class="accordion__item border-b-2 border-[#000]">
                    <summary class="accordion__item-btn py-6  cursor-pointer">
                        <div class="flex w-full">
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Zamówienie</h3>
                                <p class="font-light mt-3">#76888</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Przewidywany czas dostawy</h3>
                                <p class="font-light mt-3">20 maja 2024r.</p>
                            </div>
                            <div class="w-1/3">
                                <h3 class="font-bold text-2xl w-full "> Nr listu przewozowego</h3>
                                <p class="font-light mt-4 w-full">AW34234324576888</p><br>
                                <button class="px-4  border border-2 border-[#000] font-bold py-2 rounded-full"> skopiuj </button>
                            </div>
                        </div>
                    </summary>
                    <div class="accordion__item-desc bg-white">
                        <Trackeritem/>
                    </div>
                </details>
            </div>

            <script>
                window.addEventListener("DOMContentLoaded",() => {
                    const menu = new Accordion("#menu");
                });

                class Accordion {
                    /** Element used for this accordion */
                    el: HTMLElement | null;
                    /** Accordion item array */
                    items: AccordionItem[] = [];
                    /**
                     * @param el CSS selector of the accordion
                     */
                    constructor(el: string) {
                        this.el = document.querySelector(el);

                        const itemEls = Array.from(this.el?.querySelectorAll("details") || []);

                        itemEls.forEach((itemEl,i) => {
                            const id = `${i}`;
                            itemEl.setAttribute("data-item",id)
                            this.items.push(new AccordionItem(id,this));
                        });
                    }
                }
                class AccordionItem {
                    /** Accordion object to which the item belongs */
                    parent: Accordion;
                    /** `<details>` used for the accordion item */
                    el: HTMLDetailsElement | null | undefined;
                    /** `<summary>` of the `<details>` */
                    summary: HTMLElement | null | undefined;
                    /** Content element succeeding the `<summary>` */
                    content: HTMLElement | null | undefined;
                    /** Element is collapsing */
                    isCollapsing = false;
                    /** Element is expanding */
                    isExpanding = false;
                    /** Animation object */
                    animation?: Animation | null;
                    /** Animation duration and easing */
                    animParams: AnimParams = {
                        duration: 100,
                        easing: "cubic-bezier(0.33,1,0.68,1)"
                    };
                    /** Actions to run after expanding the item. */
                    animActionsExpand: AnimActions = {
                        onfinish: this.onAnimationFinish.bind(this,true),
                        oncancel: () => { this.isExpanding = false; }
                    };
                    /** Actions to run after collapsing the item. */
                    animActionsCollapse: AnimActions = {
                        onfinish: this.onAnimationFinish.bind(this,false),
                        oncancel: () => { this.isCollapsing = false; }
                    };
                    /** Close any open items. */
                    closePrevious(): void {
                        const openItems = this.parent.items.filter(item => item.isExpanding || item.el?.open);
                        openItems?.forEach(item => item.collapse());
                    }
                    /**
                     * @param id ID of the accordion item
                     * @param parent Accordion object to which the item belongs
                     */
                    constructor(id: string, parent: Accordion) {
                        this.parent = parent;
                        this.el = this.parent.el?.querySelector(`[data-item="${id}"]`);
                        this.summary = this.el?.querySelector("summary");
                        this.summary?.addEventListener("click", this.toggle.bind(this));
                        this.content = this.summary?.nextElementSibling as HTMLElement;
                    }
                    /**
                     * Open or close the accordion.
                     * @param e Click event whose default behavior should be prevented
                     */
                    toggle(e?: Event) {
                        e?.preventDefault();
                        this.el?.classList.remove("collapsing","expanding");

                        const detailsClicked = (e?.target as HTMLElement).parentElement;
                        const dataItemClicked = detailsClicked?.getAttribute("data-item");
                        const detailsOpen = this.el?.parentElement?.querySelector("[open]");
                        const dataItemOpen = detailsOpen?.getAttribute("data-item");

                        if (dataItemClicked !== dataItemOpen) {
                            // run the pre-toggle action only if a different item is clicked
                            this.closePrevious();
                        }
                        if (this.isCollapsing || !this.el?.open) {
                            this.open();
                        } else if (this.isExpanding || this.el?.open) {
                            this.collapse();
                        }
                    }
                    /** Open the item and run the animation for expanding. */
                    open(): void {
                        if (this.el) {
                            this.el.style.height = `${this.el.offsetHeight}px`;
                            this.el.open = true;

                            this.expand();
                        }
                    }
                    /** Expansion animation */
                    expand(): void {
                        this.el?.classList.add("expanding");
                        this.isExpanding = true;

                        const startHeight = this.el?.offsetHeight || 0;
                        const summaryHeight = this.summary?.offsetHeight ||10;
                        const contentHeight = this.content?.offsetHeight || 10;
                        const endHeight = summaryHeight + contentHeight;

                        this.animation?.cancel();
                        this.animation = this.el?.animate(
                            { height: [`${startHeight}px`, `${endHeight}px`] },
                            this.animParams
                        );
                        if (this.animation) {
                            this.animation.onfinish = this.animActionsExpand.onfinish;
                            this.animation.oncancel = this.animActionsExpand.oncancel;
                        }
                    }
                    /** Close the item and run the animation for collapsing. */
                    collapse(): void {
                        this.el?.classList.add("collapsing");
                        this.isCollapsing = true;

                        const startHeight = this.el?.offsetHeight || 0;
                        const endHeight = this.summary?.offsetHeight || 0;

                        this.animation?.cancel();
                        this.animation = this.el?.animate(
                            { height: [`${startHeight}px`, `${endHeight}px`] },
                            this.animParams
                        );
                        if (this.animation) {
                            this.animation.onfinish = this.animActionsCollapse.onfinish;
                            this.animation.oncancel = this.animActionsCollapse.oncancel;
                        }
                    }
                    /** Actions to run when the animation is finished */
                    onAnimationFinish(open: boolean): void {
                        if (this.el) {
                            this.el.open = open;

                            if (this.animation) {
                                this.animation = null;
                            }
                            this.isCollapsing = false;
                            this.isExpanding = false;
                            this.el.style.height = "";
                            this.el.classList.remove("collapsing","expanding");
                        }
                    }
                }
                type AnimActions = {
                    onfinish: () => void,
                    oncancel: () => void
                }
                type AnimParams = {
                    duration: number,
                    easing: string
                }
            </script>

        </div>
    </section>

</Page>
